#!/usr/bin/env python3
"""
Test script for Nebula Dashboard VCD integration

This script creates a sample VCD file and tests the dashboard's
ability to load and replay VCD data.
"""

import os
import sys

# Add current directory to path for imports
sys.path.insert(0, ".")

from nebula_vcd_parser import SimpleVCDParser


def create_test_vcd():
    """Create a comprehensive test VCD file with router activity"""
    vcd_content = """$version Generated by Verilator $end
$date Thu Jan 25 15:30:00 2025 $end
$comment
 Nebula NoC Test Simulation
$end
$timescale 1ps $end

$scope module tb_nebula_top $end
$scope module dut $end
$scope module mesh_network $end

$scope module router_0_0 $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 1 # flit_in_valid[0] $end
$var wire 1 $ flit_out_valid[0] $end
$var wire 1 % flit_in_valid[1] $end
$var wire 1 & flit_out_valid[1] $end
$var wire 64 ' flit_in_data[0] $end
$var wire 64 ( flit_out_data[0] $end
$upscope $end

$scope module router_1_0 $end
$var wire 1 ) flit_in_valid[0] $end
$var wire 1 * flit_out_valid[0] $end
$var wire 64 + flit_in_data[0] $end
$var wire 64 , flit_out_data[0] $end
$upscope $end

$scope module router_0_1 $end
$var wire 1 - flit_in_valid[0] $end
$var wire 1 . flit_out_valid[0] $end
$var wire 64 / flit_in_data[0] $end
$var wire 64 0 flit_out_data[0] $end
$upscope $end

$scope module router_1_1 $end
$var wire 1 1 flit_in_valid[0] $end
$var wire 1 2 flit_out_valid[0] $end
$var wire 64 3 flit_in_data[0] $end
$var wire 64 4 flit_out_data[0] $end
$upscope $end

$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
0!
0"
0#
0$
0%
0&
0)
0*
0-
0.
01
02
b0 '
b0 (
b0 +
b0 ,
b0 /
b0 0
b0 3
b0 4

#1000
1!

#2000
0!
1"

#3000
1!

#4000
0!

#5000
1!
1#
b1010101010101010 '

#6000
0!
1$
b1111000011110000 (

#7000
1!
0#
0$

#8000
0!

#9000
1!
1%
b1100110011001100 '

#10000
0!
1&
b1001100110011001 (

#11000
1!
0%
0&

#12000
0!

#13000
1!
1)
b1111111100000000 +

#14000
0!
1*
b0000000011111111 ,

#15000
1!
0)
0*

#16000
0!

#17000
1!
1-
b1010101001010101 /

#18000
0!
1.
b0101010110101010 0

#19000
1!
0-
0.

#20000
0!

#21000
1!
11
b1100001111000011 3

#22000
0!
12
b0011110000111100 4

#23000
1!
01
02

#24000
0!

#25000
1!

#26000
0!

#27000
1!
1#
1)
b1111111111111111 '
b0000111100001111 +

#28000
0!
1$
1*
b0000111100001111 (
b1111111111111111 ,

#29000
1!
0#
0)
0$
0*

#30000
0!
"""

    with open("test_nebula.vcd", "w") as f:
        f.write(vcd_content)

    print("✅ Created test VCD file: test_nebula.vcd")
    return "test_nebula.vcd"


def test_vcd_parsing(vcd_file):
    """Test parsing the VCD file"""
    print(f"\n🔍 Testing VCD parsing...")

    parser = SimpleVCDParser(vcd_file)
    success = parser.parse()

    if success:
        print(f"✅ Successfully parsed VCD file")
        print(f"   - Signals found: {len(parser.signals)}")
        print(f"   - Time events: {len(parser.time_events)}")
        print(f"   - Packet events: {len(parser.packet_events)}")
        print(f"   - Simulation duration: {parser.get_simulation_duration()} ps")

        # Show router activity
        activity = parser.get_router_activity()
        print(f"   - Router activity:")
        for router_id, events in activity.items():
            print(f"     Router {router_id}: {len(events)} events")

        # Show some packet events
        if parser.packet_events:
            print(f"   - Sample packet events:")
            for i, event in enumerate(parser.packet_events[:5]):
                print(
                    f"     {i+1}. t={event.timestamp} router={event.router_id} type={event.event_type}"
                )

        return True
    else:
        print("❌ VCD parsing failed")
        return False


def test_dashboard_integration():
    """Test that the dashboard can import VCD functionality"""
    print(f"\n🎮 Testing dashboard integration...")

    try:
        import nebula_dashboard

        print("✅ Dashboard import successful")

        # Test that VCD functionality is available
        dashboard = nebula_dashboard.NebulaDashboard()

        # Test VCD loading method exists
        if hasattr(dashboard, "load_vcd_file"):
            print("✅ VCD loading method available")
        else:
            print("❌ VCD loading method missing")
            return False

        # Test VCD replay methods exist
        if hasattr(dashboard, "update_vcd_replay"):
            print("✅ VCD replay method available")
        else:
            print("❌ VCD replay method missing")
            return False

        print("✅ Dashboard VCD integration complete")
        return True

    except Exception as e:
        print(f"❌ Dashboard integration test failed: {e}")
        return False


def main():
    print("🚀 Nebula Dashboard VCD Integration Test")
    print("=" * 50)

    # Create test VCD file
    vcd_file = create_test_vcd()

    # Test VCD parsing
    parse_success = test_vcd_parsing(vcd_file)

    # Test dashboard integration
    dashboard_success = test_dashboard_integration()

    # Cleanup
    if os.path.exists(vcd_file):
        os.remove(vcd_file)
        print(f"\n🧹 Cleaned up test file: {vcd_file}")

    # Summary
    print(f"\n📊 Test Results:")
    print(f"   VCD Parsing: {'✅ PASS' if parse_success else '❌ FAIL'}")
    print(f"   Dashboard Integration: {'✅ PASS' if dashboard_success else '❌ FAIL'}")

    if parse_success and dashboard_success:
        print(f"\n🎉 All tests passed! VCD integration is ready.")
        print(f"   Run 'make dashboard' to start the dashboard")
        print(f"   Press 'L' to load VCD files")
        print(f"   Press 'T' to start VCD replay")
        return 0
    else:
        print(f"\n❌ Some tests failed. Check the errors above.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
